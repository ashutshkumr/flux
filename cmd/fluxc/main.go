package main

import (
	"context"
	"log"
	"time"

	"github.com/ashutshkumr/flux/pkg/api"
	"google.golang.org/grpc"
)

func main() {
	req := api.SetConfigRequest{
		Ports: []*api.Port{{Name: "p1", Ifc: "veth1"}},
		Flows: []*api.Flow{{
			Name:   "f1",
			TxName: "p1",
			Headers: []*api.Header{{
				Raw: &api.Raw{
					Bytes: []byte{
						0x00, 0x00, 0x00, 0x00, 0x00, 0xAA,
						0x00, 0x00, 0x00, 0x00, 0x00, 0xBB,
						0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00,
					},
				},
			}},
		}},
	}

	conn, err := grpc.Dial("localhost:5000", grpc.WithInsecure())
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()

	client := api.NewFluxServiceClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	res, err := client.SetConfig(ctx, &req)
	if err != nil {
		log.Fatal(err)
	}

	log.Println(res)
}
